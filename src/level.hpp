
#ifndef LEVEL_H
#define LEVEL_H

#include <SDL2/SDL.h>
#include <SDL2/SDL_image.h>
#include <string>
#include <vector>
#include "objects.h"

using namespace std;



class tile 
{
    public:

    SDL_Texture* tiletext = NULL;

    int width=32;
    int height=32;

    int x; //x and y coords on the map
    int y;
     
    int sx; // x and y coords on the sprite sheet
    int sy;
    
    bool isobstacle=false;
    
     tile ()
    {
         x=0;
         y=0;
         sx=0;
         sy=0;
    }

    tile ( SDL_Texture* text)
    {
         tiletext = text;
         x=0;
         y=0;
         sx=0;
         sy=0;
    }

    tile ( SDL_Texture* text, int sxn , int syn)
    {
          sx=sxn;
          sy=syn;
          tiletext = text;
    }
     
    void rendertile ( SDL_Renderer* renderer )
    {
         
         SDL_Rect src;
         src.x=sx;
         src.y=sy;
         src.w=width;
         src.h=height;
         
         SDL_Rect dest;
         dest.x=x;
         dest.y=y;
         dest.w=src.w;
         dest.h=src.h;
        
         SDL_RenderCopy( renderer , tiletext , &src , &dest );

     }

     void copytile ( tile tileset_tile ) // for copying the tileset data onto the map data
     {
         
         tiletext = tileset_tile.tiletext;
         sx=tileset_tile.sx;
         sy=tileset_tile.sy;
         width = tileset_tile.width;
         height = tileset_tile.height;

     }

};


class level
{
     public:
     string name;
     
     vector <tile> tiles_layer1;
     vector <tile> tiles_layer2;
     vector <tile> tiles_layer3;
     
     int rows;
     int columns;

     int tile_width=32;
     int tile_height=32;

     vector <tile> tileset;

     int tileset_rows;
     int tileset_columns;

     level()
     {
        rows=0;
        columns=0;
     }

     level ( int r , int c )
     {
          rows=r;
          columns=c;
     }

     level ( int r , int c , int tr , int tc )
     {
          rows=r;
          columns=c;
          tileset_rows = tr;
          tileset_columns = tc;
     }

     void set_level_dimensions( int r , int c , int tr , int tc)
     {
          rows=r;
          columns=c;
          tileset_rows = tr;
          tileset_columns = tc;
     }

     void set_tileset( string path , SDL_Renderer* ren )
     { 
          SDL_Surface* tile_surface = IMG_Load( path.c_str() );
          SDL_Texture* tileset_texture = SDL_CreateTextureFromSurface( ren ,  tile_surface );
      
          for( int i=0 ; i<tileset_rows ; ++i){
              for( int j=0 ; j<tileset_columns ; ++j){
                      
                     tile temp_tile( tileset_texture , j*tile_width , i*tile_height);
                     tileset.push_back( temp_tile );
              }     
          }
     }
     
     
    void draw_layer( SDL_Renderer* ren  , vector <tile> layer )
    {
    for ( auto& tile : layer ) 
    {
        tile.rendertile(ren);
    }
    }
    
    void draw_level( SDL_Renderer* ren)
    {
        draw_layer( ren , tiles_layer1);
        draw_layer( ren , tiles_layer2);
        draw_layer( ren , tiles_layer3);
    }
    
};


void load_main_menu( SDL_Renderer* renderer , level &main_menu )
{

     main_menu.set_level_dimensions( 30 , 32 , 133 , 8 );
     
     main_menu.set_tileset("Assets/Homepage/Home_page_tileset.png" , renderer); 

     vector <int> layer_1_values;
     vector <int> layer_2_values;
     vector <int> layer_3_values;
     
     layer_1_values = {
253,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,261,
250,5,5,4,4,5,4,4,4,4,4,1,3,2,2,3,3,3,3,3,3,3,4,4,4,1,5,5,4,5,5,252,
250,5,5,4,4,4,4,4,4,4,4,4,3,4,4,449,450,451,4,1,1,1,3,3,1,3,4,4,5,4,5,252,
250,5,4,4,4,4,3,4,4,4,4,3,4,4,4,449,450,451,3,4,3,3,2,3,4,4,4,4,4,4,5,252,
250,4,4,4,4,4,4,4,4,4,1,3,4,4,3,449,450,451,4,1,4,4,4,4,4,4,4,4,4,4,5,252,
250,5,4,4,4,4,4,4,4,4,4,4,4,2,4,449,450,451,2,2,2,1,2,4,4,4,4,4,4,4,4,252,
250,4,4,4,4,4,117,118,119,4,4,4,3,3,3,449,450,451,3,3,3,4,4,4,4,4,4,4,4,4,4,252,
250,4,4,4,4,4,117,118,119,119,4,4,3,2,4,449,450,451,2,3,4,3,4,4,4,4,4,4,4,4,4,252,
250,3,4,4,4,4,4,117,118,119,119,4,3,3,3,449,450,451,3,1,4,3,3,4,4,4,4,1,4,4,4,252,
250,3,3,1,1,4,1,1,449,450,451,3,4,4,3,449,450,451,3,3,1,3,3,5,4,4,4,4,4,4,4,252,
250,3,3,3,3,3,3,2,449,450,451,3,1,3,3,449,450,451,1,1,3,3,2,117,118,119,119,4,4,4,4,252,
250,3,3,3,2,3,3,1,449,450,451,451,1,3,4,449,450,451,3,3,1,3,2,4,117,118,119,4,4,4,4,252,
250,1,1,4,2,2,3,2,449,449,450,451,2,3,449,450,450,450,451,1,1,2,2,4,117,118,119,119,4,4,3,252,
250,5,450,4,450,450,450,450,450,450,450,450,450,450,450,450,450,450,450,450,450,450,450,450,450,450,450,450,450,3,3,252,
250,4,4,450,450,450,450,450,450,450,450,450,450,450,450,450,450,450,450,450,450,450,450,450,450,450,450,450,450,451,3,252,
250,4,4,4,4,458,450,450,450,450,458,458,458,458,450,450,450,450,450,458,458,458,458,458,458,458,458,458,458,459,3,252,
250,4,4,4,4,4,457,450,450,451,1,1,1,3,457,450,450,450,459,3,3,3,2,3,2,2,3,3,3,3,3,252,
250,4,4,4,4,4,4,449,450,451,1,2,3,3,1,449,450,451,3,3,1,3,3,3,2,3,3,3,3,3,3,252,
250,3,3,4,117,118,119,457,450,450,450,450,450,450,450,450,450,451,3,1,1,3,2,3,3,3,3,2,2,3,3,252,
250,1,4,4,117,117,118,119,457,450,458,450,458,458,458,458,450,451,2,1,73,74,74,74,74,74,74,74,74,74,75,252,
250,4,4,4,117,118,119,2,3,457,458,458,1,2,3,449,450,451,1,1,81,85,85,85,85,85,85,85,85,85,83,252,
250,4,4,4,4,4,4,2,2,3,3,2,1,2,2,449,450,450,450,73,81,85,1,85,85,85,85,85,85,85,83,252,
250,4,4,4,4,3,4,4,2,3,2,1,2,3,3,449,450,450,458,89,81,85,85,85,85,85,85,85,85,85,83,252,
250,4,4,4,4,3,3,3,3,2,1,2,2,3,3,449,450,451,3,1,81,85,85,85,85,85,85,85,85,85,83,252,
250,4,4,4,1,3,2,2,2,1,2,3,3,450,450,450,450,451,1,1,81,85,85,85,85,85,85,85,85,85,83,252,
250,4,4,1,1,3,3,1,3,3,3,3,450,450,458,458,450,451,3,3,81,85,85,85,85,85,85,1,1,85,83,252,
250,2,2,1,3,3,3,1,450,450,450,450,458,450,3,1,3,3,3,3,81,85,85,85,85,85,85,85,85,85,83,252,
250,3,3,4,3,3,3,1,450,450,450,458,458,458,3,2,3,2,3,3,89,90,90,90,90,90,90,90,90,90,91,252,
250,3,1,3,4,3,3,4,458,458,458,1,3,2,2,3,3,2,2,3,3,3,1,3,1,2,2,3,1,1,1,252,
250,249,249,249,249,249,249,249,249,249,249,249,249,249,249,249,249,249,249,249,249,249,249,249,249,249,249,249,249,249,249,252
};


     layer_2_values = {
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,1055,44,0,0,44,44,0,15,16,201,196,0,925,0,0,0,925,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,15,16,113,114,115,135,0,23,24,0,194,0,933,0,0,0,933,0,0,0,0,195,201,201,196,0,0,0,0,0,
0,0,23,24,129,130,131,143,0,64,1055,0,194,13,14,0,0,0,0,0,0,0,0,193,0,0,206,200,135,0,0,0,
0,0,0,44,137,138,139,151,0,72,0,195,204,21,22,0,0,0,0,0,0,0,205,204,0,0,44,0,143,44,0,0,
0,0,1030,0,145,146,147,44,205,198,199,204,0,0,0,0,0,0,0,0,0,0,0,0,1055,44,68,44,151,15,16,0,
0,0,0,44,15,16,0,0,0,0,15,16,0,0,0,0,0,0,0,0,0,0,0,0,15,16,113,114,115,23,24,0,
0,68,0,0,23,24,0,44,0,0,23,24,0,0,0,0,0,0,0,0,0,0,0,68,23,24,129,130,131,0,0,0,
0,198,199,196,0,68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,137,138,139,1055,44,0,
0,0,0,203,198,199,200,207,0,0,0,0,0,0,0,0,0,0,0,0,0,0,196,0,0,72,145,146,147,15,16,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,206,0,0,0,0,0,0,23,24,0,
0,13,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,206,196,0,0,0,205,196,68,0,0,
0,21,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,194,195,0,0,201,204,13,14,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,929,930,931,0,0,0,0,0,203,204,0,0,0,0,21,22,0,
0,15,16,0,0,0,0,0,0,0,0,0,0,0,0,937,938,939,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,23,24,0,208,0,0,0,0,0,940,941,0,0,0,945,946,947,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,44,1055,0,135,15,16,0,0,0,948,949,0,909,0,0,0,0,0,909,0,0,0,0,0,0,9,10,0,0,0,0,
0,113,114,115,143,23,24,0,0,0,0,0,0,917,0,0,0,0,0,917,0,0,0,0,0,0,17,18,0,0,156,0,
0,129,130,131,151,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,229,0,0,0,0,0,0,0,0,0,164,0,
0,137,138,139,44,0,0,194,0,0,0,0,0,0,0,0,0,0,0,230,179,185,185,185,185,185,185,185,185,185,181,0,
0,145,146,147,1030,0,0,193,0,0,0,0,0,0,0,0,0,0,0,238,186,156,0,0,0,0,0,0,0,0,0,0,
0,44,0,0,0,0,195,204,0,0,0,0,0,0,0,0,0,0,0,0,0,164,0,0,0,0,881,882,319,320,0,0,
0,0,68,0,0,195,204,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,889,890,327,328,0,0,
0,0,0,0,195,204,0,0,0,0,0,0,0,0,0,0,0,0,0,868,178,0,0,0,0,0,897,898,0,887,888,0,
0,199,199,199,207,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,177,0,160,0,160,0,0,0,0,895,896,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,10,9,10,177,156,0,0,0,0,160,263,264,903,904,0,
0,13,14,0,0,0,0,0,0,0,0,0,0,0,0,0,17,33,34,18,177,164,0,160,0,160,0,271,272,0,0,0,
0,21,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17,18,49,187,185,185,185,185,185,185,185,185,185,181,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,49,49,49,0,0,49,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     };


     layer_3_values = {
         0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,51,0,0,0,0,0,0,0,0,49,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,134,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,51,0,0,
0,51,0,0,142,0,0,0,0,0,0,0,0,0,0,0,49,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,49,0,0,0,0,51,0,0,0,0,0,0,0,0,
0,51,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,51,0,0,0,0,0,0,0,0,0,0,
0,0,51,51,0,0,0,0,0,0,0,0,0,0,0,49,0,0,49,0,0,0,0,0,0,0,0,134,0,51,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,49,0,0,0,0,0,0,0,0,0,0,0,0,142,0,0,0,0,
0,0,0,0,0,0,0,0,0,51,0,0,49,0,0,0,0,0,0,49,49,0,0,0,0,0,0,122,0,0,0,0,
0,0,0,0,0,0,0,0,51,0,0,0,0,49,0,0,0,0,0,0,0,0,0,0,0,0,51,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,455,0,0,0,455,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,51,0,0,455,455,455,0,0,0,0,455,455,0,0,924,0,0,455,455,455,0,0,0,0,51,0,0,0,0,0,
0,0,0,0,51,0,51,0,0,0,0,0,0,49,0,0,932,0,0,0,0,0,51,0,0,0,0,51,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,51,0,0,51,0,0,0,
0,0,0,0,0,0,0,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,49,0,0,0,0,49,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,49,49,49,49,0,0,0,0,49,0,0,
0,134,0,0,0,0,0,0,51,0,0,0,0,0,0,0,0,0,49,0,0,0,0,0,0,0,0,0,49,0,0,0,
0,142,0,0,0,0,0,0,0,0,49,0,0,49,0,0,49,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,122,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,49,0,0,0,0,0,0,228,227,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,455,49,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,51,0,0,0,0,0,0,49,0,0,49,0,0,0,49,0,0,0,49,0,0,0,0,0,0,0,0,0,0,
0,51,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,49,0,0,49,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,49,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,49,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,49,0,0,0,0,49,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,49,0,0,0,0,0,49,49,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     };


for( int i=0 ; i< layer_1_values.size() ; ++i){
   
        int index = layer_1_values[i];
         
        if(index!=0)
        {
        tile temp_tile;
        temp_tile.copytile( main_menu.tileset[index-1] );
        temp_tile.x = i%main_menu.columns * main_menu.tile_width;
        temp_tile.y = i/(main_menu.columns) * main_menu.tile_height;

        main_menu.tiles_layer1.push_back( temp_tile );
        }
}

for( int i=0 ; i< layer_2_values.size() ; ++i){
   
        int indx = layer_2_values[i];
         
        if(indx!=0)
        {
        tile temp_tile;
        temp_tile.copytile( main_menu.tileset[indx-1] );
        temp_tile.x = i%main_menu.columns * main_menu.tile_width;
        temp_tile.y = i/(main_menu.columns) * main_menu.tile_height;
        temp_tile.isobstacle=true;

        main_menu.tiles_layer2.push_back( temp_tile );
        }
}

for( int i=0 ; i< layer_3_values.size() ; ++i){
   
        int index = layer_3_values[i];
     
        if(index!=0)
        {
        tile temp_tile;
        temp_tile.copytile( main_menu.tileset[index-1] );
        temp_tile.x = i%main_menu.columns * main_menu.tile_width;
        temp_tile.y = i/(main_menu.columns) * main_menu.tile_height;

        main_menu.tiles_layer3.push_back( temp_tile );
        }
}


}

vector <int> main_menu_collider=
 {
 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,1055,44,0,0,44,44,0,15,16,201,196,0,925,0,0,0,925,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,15,16,113,114,115,135,0,23,24,0,194,0,933,0,0,0,933,0,0,0,0,195,201,201,196,0,0,0,0,0,
0,0,23,24,129,130,131,143,0,64,1055,0,194,13,14,0,0,0,0,0,0,0,0,193,0,0,206,200,135,0,0,0,
0,0,0,44,137,138,139,151,0,72,0,195,204,21,22,0,0,0,0,0,0,0,205,204,0,0,44,0,143,44,0,0,
0,0,1030,0,145,146,147,44,205,198,199,204,0,0,0,0,0,0,0,0,0,0,0,0,1055,44,68,44,151,15,16,0,
0,0,0,44,15,16,0,0,0,0,15,16,0,0,0,0,0,0,0,0,0,0,0,0,15,16,113,114,115,23,24,0,
0,68,0,0,23,24,0,44,0,0,23,24,0,0,0,0,0,0,0,0,0,0,0,68,23,24,129,130,131,0,0,0,
0,198,199,196,0,68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,137,138,139,1055,44,0,
0,0,0,203,198,199,200,207,0,0,0,0,0,0,0,0,0,0,0,0,0,0,196,0,0,72,145,146,147,15,16,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,206,0,0,0,0,0,0,23,24,0,
0,13,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,206,196,0,0,0,205,196,68,0,0,
0,21,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,194,195,0,0,201,204,13,14,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,929,930,931,0,0,0,0,0,203,204,0,0,0,0,21,22,0,
0,15,16,0,0,0,0,0,0,0,0,0,0,0,0,937,938,939,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,23,24,0,208,0,0,0,0,0,940,941,0,0,0,945,946,947,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,44,1055,0,135,15,16,0,0,0,948,949,0,909,0,0,0,0,0,909,0,0,0,0,0,0,9,10,0,0,0,0,
0,113,114,115,143,23,24,0,0,0,0,0,0,917,0,0,0,0,0,917,0,0,0,0,0,0,17,18,0,0,156,0,
0,129,130,131,151,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,229,0,0,0,0,0,0,0,0,0,164,0,
0,137,138,139,44,0,0,194,0,0,0,0,0,0,0,0,0,0,0,230,179,185,185,185,185,185,185,185,185,185,181,0,
0,145,146,147,1030,0,0,193,0,0,0,0,0,0,0,0,0,0,0,238,186,156,0,0,0,0,0,0,0,0,0,0,
0,44,0,0,0,0,195,204,0,0,0,0,0,0,0,0,0,0,0,0,0,164,0,0,0,0,881,882,319,320,0,0,
0,0,68,0,0,195,204,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,889,890,327,328,0,0,
0,0,0,0,195,204,0,0,0,0,0,0,0,0,0,0,0,0,0,868,178,0,0,0,0,0,897,898,0,887,888,0,
0,199,199,199,207,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,177,0,160,0,160,0,0,0,0,895,896,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,10,9,10,177,156,0,0,0,0,160,263,264,903,904,0,
0,13,14,0,0,0,0,0,0,0,0,0,0,0,0,0,17,33,34,18,177,164,0,160,0,160,0,271,272,0,0,0,
0,21,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17,18,49,187,185,185,185,185,185,185,185,185,185,181,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,49,49,49,0,0,49,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
};

 bool check_collision_for_level( level cur_level , texrect entity , vector <int> collider )          
 {
        
            int ind;
            int column = floor((float)entity.rectangle.x/(float)cur_level.tile_width) ;
            int rows = floor((float)entity.rectangle.y/(float)cur_level.tile_height);
            ind = column + rows*cur_level.columns;

            if( collider[ind] != 0 )
            {
                return true;
            } 
            else 
            {
               return false;
            }
 }
     







#endif